base_sens$CC_FR_Ingreso_Corte<-cut(base_sens$CC_FR_Ingreso,breaks=seq(0,43,length.out=5))
table(base_sens$CC_FR_Ingreso_Corte)
clases_fr <- cut(base_sens$CC_FR_Ingreso,breaks=seq(0,43,length.out=10))
table(clases_fr)
medias_fr<-tapply(base_sens$CC_FR_Ingreso,INDEX=clases_fr,FUN=mean)
table(base_sens$CC_FR_Ingreso_Corte)
table(clases_fr)
table(base_sens$CC_FR_Ingreso_Corte)
sumaYporClases_edad
#distintos breaks para posteriores graficos
cuartiles<-cut(base_sens$arg1,breaks=seq(min, max, length.out=5))
base_sens$Compl_Sang_Todos <- as.factor(base_sens$Compl_Sang_Todos)
summary(base_sens$Log_FC)
base_sens$Log_FC_Corte<-cut(base_sens$Log_FC,breaks=seq(3.4,5.19,length.out=5))
table(base_sens$Log_FC_Corte)
clases_FC <- cut(base_sens$Log_FC,breaks=seq(3.4,5.19,length.out=10))
table(clases_FC)
medias_FC<-tapply(base_sens$Log_FC,INDEX=clases_FC,FUN=mean)
base_sens$Compl_Sang_Todos <- as.integer(base_sens$Compl_Sang_Todos)
sumaYporClases_FC<-tapply(base_sens$Compl_Sang_Todos,INDEX=clases_FC,FUN=sum)
sumaYporClases_FC
pEstimado_FC<-as.vector(sumaYporClases_FC/table(clases_FC))
pEstimado_FC <- pEstimado_FC -1
logit_FC<-log(pEstimado_FC/(1-(pEstimado_FC)))
plot(medias_FC,logit_FC,xlab="Media de FC por clase",
ylab="Logit de Probabilidad de Sangrado por clase",
main= "Prueba de relación lineal: FC con Logit de probabilidad de
sangrado",col="blue",pch=20, type="lowess")
table(base_sens$Log_FC_Corte)
base_sens$Log_FC_Corte<-cut(base_sens$Log_FC,breaks=seq(3.4,5.19,length.out=4))
table(base_sens$Log_FC_Corte)
graficador(binomio)
min(base_sens$Pac_Edad)
max(base_sens$Pac_Edad)
ntile(base_sens$Pac_Edad, 3)
base_sens <- base_logit2
base_sens$Compl_Sang_Todos <- as.factor(base_sens$Compl_Sang_Todos)
graficador <- function(grupos, datos){
outcome <- base_sens$Compl_Sang_Todos
medias<-tapply(datos,INDEX=grupos,FUN=mean)
sumaYporClases<-tapply(as.integer(outcome),INDEX=grupos,FUN=sum)
pEstimado<-as.vector(sumaYporClases/table(arg1))
pEstimado<- pEstimado -1
logit<-log(pEstimado/(1-(pEstimado)))
str(logit)
plot(medias,logit,xlab="Media por clase",
ylab="Logit de Probabilidad de Sangrado por clase",
main= "Prueba de relación lineal: Variable X por
sangrado",col="blue",pch=20, type="lowess")
}
analysisSens <- function (arg1){ #arg1 debe ser base$columna
#datos a analizar
datos <- arg1
outcome <- base_sens$Compl_Sang_Todos
#min y max para poder hacer tabla de cortes
#min <- min(datos)
#max <- max(datos)
#hago breaks
binomial <- ntile(datos, 2)
terciles <- ntile(datos, 3)
cuartiles <- ntile(datos, 4)
quintiles <- ntile(datos, 5)
deciles <- ntile(datos, 10)
#hago graficos
graficador(binomial, datos)
graficador(terciles, datos)
graficador(cuartiles, datos)
graficador(quintiles, datos)
graficador(deciles, datos)
}
analysisSens(base_sens$Pac_Edad)
base_sens <- base_logit2
base_sens$Compl_Sang_Todos <- as.factor(base_sens$Compl_Sang_Todos)
graficador <- function(grupos, datos){
outcome <- base_sens$Compl_Sang_Todos
medias<-tapply(datos,INDEX=grupos,FUN=mean)
sumaYporClases<-tapply(as.integer(outcome),INDEX=grupos,FUN=sum)
pEstimado<-as.vector(sumaYporClases/table(grupos))
pEstimado<- pEstimado -1
logit<-log(pEstimado/(1-(pEstimado)))
str(logit)
plot(medias,logit,xlab="Media por clase",
ylab="Logit de Probabilidad de Sangrado por clase",
main= "Prueba de relación lineal: Variable X por
sangrado",col="blue",pch=20, type="lowess")
}
analysisSens <- function (arg1){ #arg1 debe ser base$columna
#datos a analizar
datos <- arg1
outcome <- base_sens$Compl_Sang_Todos
#min y max para poder hacer tabla de cortes
#min <- min(datos)
#max <- max(datos)
#hago breaks
binomial <- ntile(datos, 2)
terciles <- ntile(datos, 3)
cuartiles <- ntile(datos, 4)
quintiles <- ntile(datos, 5)
deciles <- ntile(datos, 10)
#hago graficos
graficador(binomial, datos)
graficador(terciles, datos)
graficador(cuartiles, datos)
graficador(quintiles, datos)
graficador(deciles, datos)
}
analysisSens(base_sens$Pac_Edad)
analysisSens(base_sens$CC_FR_Ingreso)
install.packages("gsubfn")
base_sens <- base_logit2
base_sens$Compl_Sang_Todos <- as.factor(base_sens$Compl_Sang_Todos)
library(gsubfn)
ylabstring <- gsubfn(, list(nombreVar), 'Logit de Probabilidad de Sangrado por $nombreVar')
library(gsubfn)
nombreVar <- "Viva Peron"
ylabstring <- gsubfn(, list(nombreVar), 'Logit de Probabilidad de Sangrado por $nombreVar')
ylabstring
mainstring <- gsubfn(, list(nombreVar), 'Prueba de relación lineal: Variable $nombreVar por
sangrado')
nombreVar <- "Viva Peron"
ylabstring <- gsubfn(, list(nombre = nombreVar), 'Logit de Probabilidad de Sangrado por $nombre')
ylabstring
base_sens <- base_logit2
base_sens$Compl_Sang_Todos <- as.factor(base_sens$Compl_Sang_Todos)
library(gsubfn)
graficador <- function(grupos, datos, nombreVar){
outcome <- base_sens$Compl_Sang_Todos
nombre <- nombreVar
ylabstring <- gsubfn(, list(name = nombre), 'Logit de Probabilidad de Sangrado por $name')
mainstring <- gsubfn(, list(name = nombre), 'Prueba de relación lineal: Variable $name por sangrado')
medias<-tapply(datos,INDEX=grupos,FUN=mean)
sumaYporClases<-tapply(as.integer(outcome),INDEX=grupos,FUN=sum)
pEstimado<-as.vector(sumaYporClases/table(grupos))
pEstimado<- pEstimado -1
logit<-log(pEstimado/(1-(pEstimado)))
str(logit)
plot(medias,logit,xlab="Media por clase",
ylab=ylabstring,
main= mainstring,col="blue",pch=20, type="lowess")
}
analysisSens <- function (arg1){ #arg1 debe ser base$columna
#datos a analizar
nombreVar <- deparse(substitute(arg1))
datos <- arg1
outcome <- base_sens$Compl_Sang_Todos
#min y max para poder hacer tabla de cortes
#min <- min(datos)
#max <- max(datos)
#hago breaks
binomial <- ntile(datos, 2)
terciles <- ntile(datos, 3)
cuartiles <- ntile(datos, 4)
quintiles <- ntile(datos, 5)
deciles <- ntile(datos, 10)
#hago graficos
graficador(binomial, datos, nombreVar)
graficador(terciles, datos, nombreVar)
graficador(cuartiles, datos, nombreVar)
graficador(quintiles, datos, nombreVar)
graficador(deciles, datos, nombreVar)
}
analysisSens(base_sens$Pac_Edad)
base_sens <- base_logit2
base_sens$Compl_Sang_Todos <- as.factor(base_sens$Compl_Sang_Todos)
library(gsubfn)
graficador <- function(grupos, datos, nombreVar){
outcome <- base_sens$Compl_Sang_Todos
nombre <- nombreVar
ylabstring <- gsubfn(, list(name = nombre), 'Logit de Probabilidad de Sangrado por $name')
mainstring <- gsubfn(, list(name = nombre), 'Prueba de relación lineal: Variable $name por sangrado')
medias<-tapply(datos,INDEX=grupos,FUN=mean)
sumaYporClases<-tapply(as.integer(outcome),INDEX=grupos,FUN=sum)
pEstimado<-as.vector(sumaYporClases/table(grupos))
pEstimado<- pEstimado -1
logit<-log(pEstimado/(1-(pEstimado)))
str(logit)
plot(medias,logit,xlab="Media por clase",
ylab=ylabstring,
main= mainstring,col="blue",pch=20, type="lowess")
}
analysisSens <- function (arg1){ #arg1 debe ser base$columna
#datos a analizar
nombreVar <- deparse(substitute(arg1))
nombreVar <- substring(nombrVar, 11)
datos <- arg1
outcome <- base_sens$Compl_Sang_Todos
#min y max para poder hacer tabla de cortes
#min <- min(datos)
#max <- max(datos)
#hago breaks
binomial <- ntile(datos, 2)
terciles <- ntile(datos, 3)
cuartiles <- ntile(datos, 4)
quintiles <- ntile(datos, 5)
deciles <- ntile(datos, 10)
#hago graficos
graficador(binomial, datos, nombreVar)
graficador(terciles, datos, nombreVar)
graficador(cuartiles, datos, nombreVar)
graficador(quintiles, datos, nombreVar)
graficador(deciles, datos, nombreVar)
}
analysisSens(base_sens$Pac_Edad)
base_sens <- base_logit2
base_sens$Compl_Sang_Todos <- as.factor(base_sens$Compl_Sang_Todos)
library(gsubfn)
graficador <- function(grupos, datos, nombreVar){
outcome <- base_sens$Compl_Sang_Todos
nombre <- nombreVar
ylabstring <- gsubfn(, list(name = nombre), 'Logit de Probabilidad de Sangrado por $name')
mainstring <- gsubfn(, list(name = nombre), 'Prueba de relación lineal: Variable $name por sangrado')
medias<-tapply(datos,INDEX=grupos,FUN=mean)
sumaYporClases<-tapply(as.integer(outcome),INDEX=grupos,FUN=sum)
pEstimado<-as.vector(sumaYporClases/table(grupos))
pEstimado<- pEstimado -1
logit<-log(pEstimado/(1-(pEstimado)))
str(logit)
plot(medias,logit,xlab="Media por clase",
ylab=ylabstring,
main= mainstring,col="blue",pch=20, type="lowess")
}
analysisSens <- function (arg1){ #arg1 debe ser base$columna
#datos a analizar
nombreVar <- deparse(substitute(arg1))
nombreVar <- substring(nombreVar, 11)
datos <- arg1
outcome <- base_sens$Compl_Sang_Todos
#min y max para poder hacer tabla de cortes
#min <- min(datos)
#max <- max(datos)
#hago breaks
binomial <- ntile(datos, 2)
terciles <- ntile(datos, 3)
cuartiles <- ntile(datos, 4)
quintiles <- ntile(datos, 5)
deciles <- ntile(datos, 10)
#hago graficos
graficador(binomial, datos, nombreVar)
graficador(terciles, datos, nombreVar)
graficador(cuartiles, datos, nombreVar)
graficador(quintiles, datos, nombreVar)
graficador(deciles, datos, nombreVar)
}
analysisSens(base_sens$Pac_Edad)
analysisSens(base_sens$CC_FR_Ingreso)
base_sens <- base_logit2
base_sens$Compl_Sang_Todos <- as.factor(base_sens$Compl_Sang_Todos)
library(gsubfn)
graficador <- function(grupos, datos, nombreVar, divisor){
outcome <- base_sens$Compl_Sang_Todos
nombre <- nombreVar
divisorHowMuch <- divisor
ylabstring <- gsubfn(, list(name = nombre, howmuch = divisorHowMuch), 'Logit de Probabilidad de Sangrado por $name en $howmuch')
mainstring <- gsubfn(, list(name = nombre, howmuch = divisorHowMuch), 'Prueba de relación lineal: Variable $name (en $howmuch) por sangrado')
medias<-tapply(datos,INDEX=grupos,FUN=mean)
sumaYporClases<-tapply(as.integer(outcome),INDEX=grupos,FUN=sum)
pEstimado<-as.vector(sumaYporClases/table(grupos))
pEstimado<- pEstimado -1
logit<-log(pEstimado/(1-(pEstimado)))
str(logit)
plot(medias,logit,xlab="Media por clase",
ylab=ylabstring,
main= mainstring,col="blue",pch=20, type="lowess")
}
analysisSens <- function (arg1){ #arg1 debe ser base$columna
#datos a analizar
nombreVar <- deparse(substitute(arg1))
nombreVar <- substring(nombreVar, 11)
datos <- arg1
outcome <- base_sens$Compl_Sang_Todos
#min y max para poder hacer tabla de cortes
#min <- min(datos)
#max <- max(datos)
#hago breaks
binomial <- ntile(datos, 2)
terciles <- ntile(datos, 3)
cuartiles <- ntile(datos, 4)
quintiles <- ntile(datos, 5)
deciles <- ntile(datos, 10)
#hago graficos
graficador(binomial, datos, nombreVar, 'binomial')
graficador(terciles, datos, nombreVar, 'terciles')
graficador(cuartiles, datos, nombreVar, 'cuartiles')
graficador(quintiles, datos, nombreVar, 'quintiles')
graficador(deciles, datos, nombreVar, 'deciles')
}
analysisSens(base_sens$Pac_Edad)
analysisSens(base_sens$CC_FC_Ingreso)
analysisSens(base_sens$Log_FC)
analysisSens(base_sens$CC_TAS_Ingreso)
analysisSens(base_sens$Log_TAS)
analysisSens(base_sens$Log_Lab_Plaq)
analysisSens(base_sens$Log_ClCr)
#Se sugiere descarga de objetos en memoria.
#rm(list = ls())
#Librerías a cargar
library(sjPlot)
library(sjmisc)
library(purrr)
library(sjlabelled)
library(tidymodels)
library(arsenal)
library(boot)
library(broom)
library(car)
library(caret)
library(corrplot)
library(corrr)
library(data.table)
library(dplyr)
library(emmeans)
library(epiDisplay)
library(epiR)
library(fBasics)
library(foreach)
library(foreign)
library(GGally)
library(ggplot2)
library(ggpubr)
library(glmmTMB)
library(glmnet)
library(gridExtra)
library(InformationValue)
library(kableExtra)
library(knitr)
library(lattice)
library(lmerTest)
library(mice)
library(naniar)
library(nlme)
library(pROC)
library(questionr)
library(randomForest)
library(readxl)
library(reshape2)
library(ResourceSelection)
library(rlist)
library(rmarkdown)
library(Rmisc)
library(tableone)
library(tidyr)
library(tidyverse)
library(VIM)
library(visdat)
options(scipen = 999)
prop_miss(base)*100
setwd("~/Desktop/Proyectos/TEP R")
#Se sugiere descarga de objetos en memoria.
#rm(list = ls())
#Librerías a cargar
library(sjPlot)
library(sjmisc)
library(purrr)
library(sjlabelled)
library(tidymodels)
library(arsenal)
library(boot)
library(broom)
library(car)
library(caret)
library(corrplot)
library(corrr)
library(data.table)
library(dplyr)
library(emmeans)
library(epiDisplay)
library(epiR)
library(fBasics)
library(foreach)
library(foreign)
library(GGally)
library(ggplot2)
library(ggpubr)
library(glmmTMB)
library(glmnet)
library(gridExtra)
library(InformationValue)
library(kableExtra)
library(knitr)
library(lattice)
library(lmerTest)
library(mice)
library(naniar)
library(nlme)
library(pROC)
library(questionr)
library(randomForest)
library(readxl)
library(reshape2)
library(ResourceSelection)
library(rlist)
library(rmarkdown)
library(Rmisc)
library(tableone)
library(tidyr)
library(tidyverse)
library(VIM)
library(visdat)
options(scipen = 999)
prop_miss(base)*100
prop_miss(base)*100
#Se sugiere descarga de objetos en memoria.
#rm(list = ls())
#Librerías a cargar
library(sjPlot)
library(sjmisc)
library(purrr)
library(sjlabelled)
library(tidymodels)
library(arsenal)
library(boot)
library(broom)
library(car)
library(caret)
library(corrplot)
library(corrr)
library(data.table)
library(dplyr)
library(emmeans)
library(epiDisplay)
library(epiR)
library(fBasics)
library(foreach)
library(foreign)
library(GGally)
library(ggplot2)
library(ggpubr)
library(glmmTMB)
library(glmnet)
library(gridExtra)
library(InformationValue)
library(kableExtra)
library(knitr)
library(lattice)
library(lmerTest)
library(mice)
library(naniar)
library(nlme)
library(pROC)
library(questionr)
library(randomForest)
library(readxl)
library(reshape2)
library(ResourceSelection)
library(rlist)
library(rmarkdown)
library(Rmisc)
library(tableone)
library(tidyr)
library(tidyverse)
library(VIM)
library(visdat)
options(scipen = 999)
prop_miss(base)*100
prop_miss(base)*100
#prop_miss(base)*100
prop_miss(base$Compl_Sang_Todos)
setwd("~/Desktop/Proyectos/TEP R")
prop_miss(base)*100
prop_miss(base)*100
#Se sugiere descarga de objetos en memoria.
#rm(list = ls())
#Librerías a cargar
library(sjPlot)
library(sjmisc)
library(purrr)
library(sjlabelled)
library(tidymodels)
library(arsenal)
library(boot)
library(broom)
library(car)
library(caret)
library(corrplot)
library(corrr)
library(data.table)
library(dplyr)
library(emmeans)
library(epiDisplay)
library(epiR)
library(fBasics)
library(foreach)
library(foreign)
library(GGally)
library(ggplot2)
library(ggpubr)
library(glmmTMB)
library(glmnet)
library(gridExtra)
library(InformationValue)
library(kableExtra)
library(knitr)
library(lattice)
library(lmerTest)
library(mice)
library(naniar)
library(nlme)
library(pROC)
library(questionr)
library(randomForest)
library(readxl)
library(reshape2)
library(ResourceSelection)
library(rlist)
library(rmarkdown)
library(Rmisc)
library(tableone)
library(tidyr)
library(tidyverse)
library(VIM)
library(visdat)
options(scipen = 999)
